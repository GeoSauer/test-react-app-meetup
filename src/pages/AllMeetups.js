import { useState, useEffect } from "react";
// useEffect is a hook that allows you to run some code under certain conditions

import MeetupList from "../components/meetups/MeetupList";

// const DUMMY_DATA = [
//   {
//     id: "m1",
//     title: "This is a first meetup",
//     image:
//       "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg",
//     address: "Meetupstreet 5, 12345 Meetup City",
//     description:
//       "This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!",
//   },
//   {
//     id: "m2",
//     title: "This is a second meetup",
//     image:
//       "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/2560px-Stadtbild_M%C3%BCnchen.jpg",
//     address: "Meetupstreet 5, 12345 Meetup City",
//     description:
//       "This is a first, amazing meetup which you definitely should not miss. It will be a lot of fun!",
//   },
// ];

function AllMeetupsPage() {
  const [isLoading, setIsLoading] = useState(true);
  // ^ useState always returns an array with exactly two elements, the first element is the current state snapshot and the second is a function for updating the state
  // for this use we set the initial state to true, because when you first navigate to the page state will be isLoading
  // the second element is named so that: setIsLoading(false), reads like: set isLoading to false.
  const [loadedMeetups, setLoadedMeetups] = useState([]);
  // ^ you can add as many types of state within a component function as you need
  // here we are passing an empty array into useState that will be overridden when the meetups are loaded

  useEffect(() => {
    setIsLoading(true);
    // ^ this is not entirely necessary, but is sort of a back up to make 100% sure that whenever the fetch function executes the state is isloading
    fetch(
      "https://react-demo-meetup-45b10-default-rtdb.firebaseio.com/meetups.json"
    )
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        const meetups = [];
        // ^ here we define a helper array to sort out our data returning as an object issue

        for (const key in data) {
          const meetup = {
            id: key,
            // ^ id is the long random autogenerated id in our db
            ...data[key],
            // ^ we use the spread operator to copy all of the key/value pairs from the nested data object into our new meetup object
          };

          meetups.push(meetup);
          // ^ now we push our new meetup object into our meetup helper array
        }
        setIsLoading(false);
        setLoadedMeetups(meetups);
        // setLoadedMeetups(data);
        // ^ this data will not work for us because when we fetch it from our api it returns as an object, but in MeetupList we are using map which only works on arrays
      });
  }, []);
  // useEffect wants two arguments.  First we pass in an anonymous arrow function, here we use our fetch function.
  // The second argument is an array of dependencies.  React checks the values in the array and checks them against their equivalents last time the useEffect function was executed.  We set it to an empty array because with no dependencies the useEffect function will run only the first time that the AllMeetupsPage component function runs. This way when the component function runs again after state changes, it won't make the fetch api call again.
  // the gotcha here is that you could add setIsloading and setLoadedMeetups but they are actually included by default by react.  Adding them to the dependency array won't break anything but is redundant.
  // --- dependency rule of thumb: always add any external values your useEffect function relies on.  In this example there are none, fetch is a built in function, and we aren't accessing any props or state that are defined outside of the useEffect function ------

  // --------- v this is the original fetch function before we added it to the useEffect function to solve the infinite loop issue of making the api call, checking state, then running it all over again ----------
  // fetch("https://react-demo-meetup-45b10-default-rtdb.firebaseio.com/")
  //   .then(
  //     // ^ here we use fetch to do its default GET method on our db api.  We add a then block and pass in an anonymous function with the response object as an argument, which is baked into the fetch function.
  //     (response) => {
  //       return response.json();
  //       // ^ response is a method built into the response object that lets us access the data, but it is formatted as a plain js object
  //     }
  //   )
  //   .then((data) => {
  //     setIsLoading(false);
  //     // ^ as soon as we have the data we can set the isLoading state to false to then display our loaded meetups
  //     setLoadedMeetups(data);
  //   });
  // // ^ so we add yet another then block to access the data directly.  Here we run into an issue of timing.  You can't make the AllMeetupsPage function async and then await the data because that would make it an invalid react component.  To get around this we add some temporary data, like a loading bar or spinning wheel, and adjust what is displayed with state.

  if (isLoading) {
    return (
      <section>
        <p>Loading...</p>
      </section>
    );
  }
  // ^ we add an if check in the component function before the final jsx is returned to display some dummy loading jsx

  return (
    <section>
      <h1>All Meetups</h1>
      <MeetupList meetups={loadedMeetups} />
      {/* ^ we can now pass loadedMeetups into our meetups prop instead of the DUMMY_DATA */}
    </section>
  );
}

// ------ v this was the second pass where we used our custom MeetupList component but still used the DUMMY_DATA ------
// function AllMeetupsPage() {
//   return (
//     <section>
//       <h1>All Meetups</h1>
//       <MeetupList meetups={DUMMY_DATA} />
//       {/* ^ you must provide the meetups prop
//       because you are expecting it inside of the MeetupList component, then pass
//       in the DUMMY_DATA array as a value */}
//     </section>
//   );
// }

// ------ v this was the first pass with hardcoded meetups ------
// function AllMeetupsPage() {
//   return (
//     <section>
//       <h1>All Meetups</h1>
//       <ul>
//         {DUMMY_DATA.map((meetup) => {
//           return <li key={meetup.id}>{meetup.title}</li>;
//           //   ^ react requires unique keys for list items so we pull id from the meetup object that was mapped out of the DUMMY_DATA
//         })}
//       </ul>
//       {/* {[<li>Item1</li>, <li>Item2</li>]} */}
//       {/* ^ with jsx you can output a dynamic
//       expression with curly braces, add an array of list items, and react will automatically render them correctly */}
//     </section>
//   );
// }

export default AllMeetupsPage;
